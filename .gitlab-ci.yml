stages:
  - setup
  - test

image: edbizarro/gitlab-ci-pipeline-php:7.4

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
#services:
#  - mysql:latest

#variables:
#  MYSQL_DATABASE: dme
#  MYSQL_ROOT_PASSWORD: ubuntu

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
    - API/vendor/
    - API/node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
setup:
  stage: setup
  only:
    changes:
      - "API/**/*"
      - ".gitlab-ci.yml"
  script:
    - cd API
    # Install Composer and project dependencies.
    - curl -sS https://getcomposer.org/installer | php
    - php composer.phar install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    # Environment
    - cp .env.testing .env
    # Generate an application key. Re-cache.
    - php artisan key:generate
    - php artisan config:cache
    # Run database migrations.
    - php artisan migrate
    # Passport keys
    - php artisan passport:keys

test:
  stage: test
  only:
    changes:
      - "API/**/*"
      - ".gitlab-ci.yml"
  script:
    - cd API
    # run laravel tests
    - php artisan test
    # run frontend tests
    # if you have any task for testing frontend
    # set it in your package.json script
    # comment this out if you don't have a frontend test
    #- npm test
